# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

orbs:
  codecov: codecov/codecov@1.2.3

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:14-browsers
      environment:
        NODE_OPTIONS: --max_old_space_size=4096

set_env: &set_env
  name: Setup Environment Variables
  command: |
    env
    if [[ $CIRCLE_PULL_REQUEST ]]
    then
      echo 'Fetching Base Commit from GitHub'
      echo 'export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"' >> $BASH_ENV
      source $BASH_ENV
      echo "export CIRCLE_PR_BASE_SHA=`curl -s https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PR_NUMBER} | jq -r '.base.sha'`" >> $BASH_ENV
      echo 'export AFFECTED_ARGS="--base ${CIRCLE_PR_BASE_SHA}"' >> $BASH_ENV
    else
      echo 'Fetching Base Commit from Deploy Cache'
      if [[ ! -f dist/last-deploy.txt ]]
      then
        mkdir -p dist && git rev-list --max-parents=0 HEAD > dist/last-deploy.txt
      fi
      echo 'export AFFECTED_ARGS="--base $(cat dist/last-deploy.txt)"' >> $BASH_ENV
    fi
    source $BASH_ENV
    echo $AFFECTED_ARGS

yarn_cache: &yarn_cache
  name: Restore yarn cache
  keys:
    - last-yarn-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ .Environment.CIRCLE_WORKFLOW_JOB_ID }}
    - last-yarn-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
    - last-yarn-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}
    - last-yarn-{{ checksum "yarn.lock" }}
    - last-yarn-

save_yarn_cache: &save_yarn_cache
  name: Save yarn cache
  key: last-yarn-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ .Environment.CIRCLE_WORKFLOW_JOB_ID }}
  paths:
    - ~/.cache
    - node_modules
    - dist/tools
    - dist/libs

deploy_cache: &deploy_cache
  name: Restore deploy cache
  keys:
    - last-deploy-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ .Environment.CIRCLE_WORKFLOW_JOB_ID }}
    - last-deploy-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
    - last-deploy-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}
    - last-deploy-{{ checksum "yarn.lock" }}

save_deploy_cache: &save_deploy_cache
  name: Save deploy cache
  key: last-deploy-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ .Environment.CIRCLE_WORKFLOW_JOB_ID }}
  paths:
    - dist/last-deploy.txt

build_cache: &build_cache
  name: Restore build cache
  keys:
    - last-build-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ .Environment.CIRCLE_WORKFLOW_JOB_ID }}
    - last-build-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
    - last-build-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}
    - last-build-{{ checksum "yarn.lock" }}

save_build_cache: &save_build_cache
  name: Save build cache
  key: last-build-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ .Environment.CIRCLE_WORKFLOW_JOB_ID }}
  paths:
    - dist/apps
    - dist/libs

coverage_cache: &coverage_cache
  name: Restore coverage cache
  keys:
    - last-coverage-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ .Environment.CIRCLE_WORKFLOW_JOB_ID }}
    - last-coverage-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
    - last-coverage-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}
    - last-coverage-{{ checksum "yarn.lock" }}

save_coverage_cache: &save_coverage_cache
  name: Save coverage cache
  key: last-coverage-{{ checksum "yarn.lock" }}-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ .Environment.CIRCLE_WORKFLOW_JOB_ID }}
  paths:
    - coverage

# install
yarn_install: &yarn_install
  name: Install dependencies
  command: yarn install --frozen-lockfile

# format
format_check: &format_check
  name: Format check
  command: yarn format:check ${AFFECTED_ARGS}

# lint
lint: &lint
  name: Lint
  command: ./node_modules/.bin/nx workspace-lint && yarn affected:lint ${AFFECTED_ARGS} --parallel

affected_test: &affected_test
  name: Afected test
  command: yarn affected:test ${AFFECTED_ARGS} --parallel -- --ci --code-coverage

affected_build: &affected_build
  name: Affected build
  command: yarn affected:build ${AFFECTED_ARGS} --parallel --configuration production

# e2e
affected_e2e: &affected_e2e
  name: Affected e2e
  command: yarn affected:e2e ${AFFECTED_ARGS} --configuration production -- --headless

# coverage
coverage: &coverage
  name: coverage
  command: bash <(curl -s https://codecov.io/bash)

deploy: &deploy
  name: Deploy
  command: |
    echo $AFFECTED_ARGS
    cat dist/last-deploy.txt
    git rev-parse HEAD
    git rev-parse HEAD > dist/last-deploy.txt
    cat dist/last-deploy.txt

update_deploy: &update_deploy
  name: Update Deploy
  command: |
    echo $AFFECTED_ARGS
    cat dist/last-deploy.txt
    git rev-parse HEAD
    git rev-parse HEAD > dist/last-deploy.txt
    cat dist/last-deploy.txt

jobs:
  install:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *yarn_cache
      - run: *yarn_install
      - save_cache: *save_yarn_cache
  check-formatting:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *yarn_cache
      - restore_cache: *deploy_cache
      - run: *set_env
      - run: *format_check
  lint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *yarn_cache
      - restore_cache: *deploy_cache
      - run: *set_env
      - run: *lint
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *yarn_cache
      - restore_cache: *deploy_cache
      - run: *set_env
      - run: *affected_build
      - save_cache: *save_build_cache
      - store_artifacts:
          path: dist/apps
      - store_artifacts:
          path: dist/libs
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *yarn_cache
      - restore_cache: *deploy_cache
      - run: *set_env
      - run: *affected_test
      - save_cache: *save_coverage_cache
      - store_artifacts:
          path: coverage
      - codecov/upload:
          file: coverage/**/lcov.info
  e2e:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *yarn_cache
      - restore_cache: *deploy_cache
      - run: *set_env
      - run: *affected_e2e
      - store_artifacts:
          path: dist/cypress

  deploy:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *yarn_cache
      - restore_cache: *deploy_cache
      - run: *set_env
      - run: *deploy
      - run: *update_deploy
      - save_cache: *save_deploy_cache

  check_pull_request:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *yarn_cache
      - restore_cache: *deploy_cache
      - run: *set_env
      - run: *yarn_install
      - run: *format_check
      - run: *lint
      - run: *affected_test
      - store_artifacts:
          path: coverage
      - run: *affected_e2e
      - store_artifacts:
          path: dist/cypress
      - run: *affected_build
      - store_artifacts:
          path: dist/apps
      - store_artifacts:
          path: dist/libs
      - save_cache: *save_yarn_cache
      - save_cache: *save_build_cache
      - save_coverage_cache: *save_coverage_cache

workflows:
  version: 2
  check_pull_request:
    when:
      not:
        - equal: [master]

  check_and_deploy:
    when:
      and:
        - equal: [master]
    jobs:
      - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - install
      - check-formatting:
          requires:
            - install
      - build:
          requires:
            - install
      - e2e:
          requires:
            - install
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - check-formatting
            - lint
            - test
            - build
            - e2e
